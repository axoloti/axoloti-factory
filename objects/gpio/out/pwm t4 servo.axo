<objdefs appVersion="2.0.0">
   <obj.normal id="pwm t4 servo" uuid="adcfa8b373fa208a079f6a8973e8b31d46f75565" sha="897f8a14cd65de6b11ad8697250640b7dc411ce5">
      <upgradeSha>f32eef1b7cb40ea3149442457b990414f3456e8d</upgradeSha>
      <sDescription>pwm output timer 4, scaled for servo motors</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>pwm.axh</helpPatch>
      <inlets>
         <frac32.positive name="pb8" description="pwm ratio"/>
         <frac32.positive name="pb9" description="pwm ratio"/>
      </inlets>
      <outlets/>
      <displays/>
      <params/>
      <attribs/>
      <file-depends/>
      <includes/>
      <depends>
         <depend>PWMD4</depend>
         <depend>PWMD4</depend>
         <depend>PWMD4</depend>
      </depends>
      <modules/>
      <code.init><![CDATA[static const PWMConfig pwmcfg = {400000, /* 400kHz PWM clock frequency.  */
	4096, /* PWM period is 128 cycles.    */
	NULL, 
	{{PWM_OUTPUT_ACTIVE_HIGH, NULL}, 
	{PWM_OUTPUT_ACTIVE_HIGH, NULL},
	{PWM_OUTPUT_ACTIVE_HIGH, NULL}, 
	{PWM_OUTPUT_ACTIVE_HIGH, NULL}},
	/* HW dependent part.*/
	0};

pwmStart(&PWMD4, &pwmcfg);
palSetPadMode(GPIOB, 8, PAL_MODE_ALTERNATE(2));
palSetPadMode(GPIOB, 9, PAL_MODE_ALTERNATE(2));]]></code.init>
      <code.dispose><![CDATA[pwmStop(&PWMD4);

palSetPadMode(GPIOB, 8, PAL_MODE_INPUT_ANALOG);
palSetPadMode(GPIOB, 9, PAL_MODE_INPUT_ANALOG);]]></code.dispose>
      <code.krate><![CDATA[   pwmEnableChannel(&PWMD4, 2, (pwmcnt_t)((inlet_pb8>=0)?(150+(inlet_pb8>>17)-(inlet_pb8>>19)):4096));
   pwmEnableChannel(&PWMD4, 3, (pwmcnt_t)((inlet_pb9>=0)?(150+(inlet_pb9>>17)-(inlet_pb9>>19)):4096));]]></code.krate>
   </obj.normal>
</objdefs>