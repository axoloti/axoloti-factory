<objdefs appVersion="1.0.12">
   <obj.normal id="vocoder" uuid="87d4cf48-208b-4828-a574-107c7678e1ea">
      <sDescription>a vocoder effect, based on the warps dsp code open sourced by mutable instruments.
any bugs/issues you find are our own, report on the axoloti forum.

Thanks to Olivier Gillet from Mutable Instruments for open sourcing their code.
http://mutable-instruments.com

modified for 48kHz operation</sDescription>
      <author>Johannes Taelman</author>
      <license>GPL</license>
      <inlets>
         <frac32buffer name="carrier"/>
         <frac32buffer name="modulator"/>
         <frac32.bipolar name="release"/>
         <frac32.bipolar name="formant"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="release"/>
         <frac32.u.map name="formant"/>
      </params>
      <attribs/>
      <includes>
         <include>./warps_vocoder.h</include>
      </includes>
      <code.declaration><![CDATA[inline float constrainQ27(int32_t v, float vMin, float vMax) {
	return std::max<float>(vMin,std::min<float>(vMax, q27_to_float(v)));
}

warps_deriv::Vocoder vocoder;]]></code.declaration>
      <code.init><![CDATA[vocoder.Init(48000);]]></code.init>
      <code.krate><![CDATA[float fmod[BUFSIZE];
float fcar[BUFSIZE];
float fout[BUFSIZE];
int i;
for(i=0;i<BUFSIZE;i++){
   fmod[i] = q27_to_float(inlet_modulator[i]); 
   fcar[i] = q27_to_float(inlet_carrier[i]); 
}

vocoder.set_release_time(constrainQ27(param_release + inlet_release, 	0.0f,1.0f));
vocoder.set_formant_shift(constrainQ27(param_formant + inlet_formant,	0.0f,1.0f));


vocoder.Process(&fmod[0],&fcar[0],&fout[0],BUFSIZE);

for(i=0;i<BUFSIZE;i++){
   outlet_out[i] = float_to_q27(fout[i]);
}]]></code.krate>
   </obj.normal>
</objdefs>