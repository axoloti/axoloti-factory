<objdefs appVersion="1.0.12">
   <obj.normal id="string" uuid="F272EAA4-2C68-4843-BA42-C6BA402943AE">
      <sDescription>string from the elements dsp code open sourced by mutable instruments.
any bugs/issues you find are our own, report on the axoloti forum.

Thanks to Olivier Gillet from Mutable Instruments for open sourcing their code.
http://mutable-instruments.com</sDescription>
      <author>Mark Harris</author>
      <license>GPL</license>
      <helpPatch>string.axh</helpPatch>
      <inlets>
         <frac32buffer name="in"/>
         <frac32.bipolar name="frequency"/>
         <frac32.bipolar name="dispersion"/>
         <frac32.bipolar name="brightness"/>
         <frac32.bipolar name="damping"/>
         <frac32.bipolar name="position"/>
      </inlets>
      <outlets>
         <frac32buffer name="l"/>
         <frac32buffer name="r"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="frequency"/>
         <frac32.u.map name="dispersion"/>
         <frac32.u.map name="brightness"/>
         <frac32.u.map name="damping"/>
         <frac32.u.map name="position"/>
      </params>
      <attribs>
         <combo name="dispersion">
            <MenuEntries>
               <string>true</string>
               <string>false</string>
            </MenuEntries>
            <CEntries>
               <string>1</string>
               <string>0</string>
            </CEntries>
         </combo>
      </attribs>
      <modules>
         <modules>lmnts</modules>
      </modules>
      <code.declaration><![CDATA[lmnts::elements::String string;
         inline float constrainQ27(int32_t v, float vMin, float vMax) {
   return std::max<float>(vMin,std::min<float>(vMax, q27_to_float(v)));
}

inline float constrain(float v, float vMin, float vMax) {
   return std::max<float>(vMin,std::min<float>(vMax, v));
}]]></code.declaration>
      <code.init><![CDATA[string.Init(attr_dispersion);]]></code.init>
      <code.krate><![CDATA[static float in[BUFSIZE];
static float out[BUFSIZE];
static float aux[BUFSIZE];

int i;

for(i=0;i<BUFSIZE;i++){
	in[i] = q27_to_float(inlet_in[i]);
}

 
string.set_frequency(constrainQ27(param_frequency + inlet_frequency,0.0000001,1.0f));
string.set_brightness(constrainQ27(param_brightness + inlet_brightness,0.0f,1.0f));
string.set_damping(constrainQ27(param_damping + inlet_damping,0.0f,1.0f));
string.set_position(constrainQ27(param_position + inlet_position,0.0f,1.0f));

// dispersion blows up ~ > 0.2 
string.set_dispersion(constrainQ27(q27_to_float(param_dispersion + inlet_dispersion) *0.20f,0.0f,0.20f));


string.Process(in,out,aux,BUFSIZE);

for(i=0;i<BUFSIZE;i++){
	outlet_l[i] = float_to_q27(out[i]);
   outlet_r[i] = float_to_q27(aux[i]);
}]]></code.krate>
   </obj.normal>
</objdefs>