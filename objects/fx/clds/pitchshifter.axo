<objdefs appVersion="1.0.12">
   <obj.normal id="pitchshifter" uuid="CF2FFE3A-9363-4C78-AF25-9F3A41E5F0E4">
      <sDescription>a pitch shift effect, based on the clouds dsp code open sourced by mutable instruments.
any bugs/issues you find are our own, report on the axoloti forum.

Thanks to Olivier Gillet from Mutable Instruments for open sourcing their code.
http://mutable-instruments.com</sDescription>
      <license>GPL</license>
      <inlets>
         <frac32buffer name="l"/>
         <frac32buffer name="r"/>
      </inlets>
      <outlets>
         <frac32buffer name="l"/>
         <frac32buffer name="r"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="ratio"/>
         <frac32.u.map name="size"/>
      </params>
      <attribs/>
      <includes>
         <include>./clouds_fx.h</include>
      </includes>
      <code.declaration><![CDATA[clouds_deriv::PitchShifter fx;]]></code.declaration>
      <code.init><![CDATA[uint16_t* buf = (uint16_t*) sdram_malloc(32768);
if(!buf) return;
fx.Init(buf);]]></code.init>
      <code.krate><![CDATA[static clouds_deriv::FloatFrame iobuf[BUFSIZE];
fx.set_ratio(q27_to_float(param_ratio));
fx.set_size(q27_to_float(param_size));
int i;
for(i=0;i<BUFSIZE;i++){
   iobuf[i].l = q27_to_float(inlet_l[i]);
   iobuf[i].r = q27_to_float(inlet_r[i]); 
}

fx.Process(iobuf,BUFSIZE);

for(i=0;i<BUFSIZE;i++){
	outlet_l[i] = float_to_q27(iobuf[i].l);
	outlet_r[i] = float_to_q27(iobuf[i].r);
}]]></code.krate>
   </obj.normal>
</objdefs>