<objdefs appVersion="1.0.12">
   <obj.normal id="rfft 128" uuid="27b4fa628dda621136f74e407ee8761ba76f631c">
      <sDescription>spectral analyzer display using 128 input points fft</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>rfft 128.axh</helpPatch>
      <rotatedParams>true</rotatedParams>
      <inlets>
         <frac32buffer name="in" description="input"/>
         <bool32 name="hold" description="hold"/>
      </inlets>
      <outlets/>
      <displays>
         <frac4ubyte.vbar name="v0" noLabel="true"/>
         <frac4ubyte.vbar name="v1" noLabel="true"/>
         <frac4ubyte.vbar name="v2" noLabel="true"/>
         <frac4ubyte.vbar name="v3" noLabel="true"/>
         <frac4ubyte.vbar name="v4" noLabel="true"/>
         <frac4ubyte.vbar name="v5" noLabel="true"/>
         <frac4ubyte.vbar name="v6" noLabel="true"/>
         <frac4ubyte.vbar name="v7" noLabel="true"/>
         <frac4ubyte.vbar name="v8" noLabel="true"/>
         <frac4ubyte.vbar name="v9" noLabel="true"/>
         <frac4ubyte.vbar name="v10" noLabel="true"/>
         <frac4ubyte.vbar name="v11" noLabel="true"/>
         <frac4ubyte.vbar name="v12" noLabel="true"/>
         <frac4ubyte.vbar name="v13" noLabel="true"/>
         <frac4ubyte.vbar name="v14" noLabel="true"/>
         <frac4ubyte.vbar name="v15" noLabel="true"/>
      </displays>
      <params/>
      <attribs/>
      <code.declaration><![CDATA[int32_t inbuf[128];
int32_t outbuf[128];
    int32_t fftbuf[256];
    int32_t hanning_q31[128];
    arm_rfft_instance_q31 rfft;
    arm_cfft_radix4_instance_q31 cfft;
int32_t state;
msg_t ThreadX2(){
      int i;
      int n = 128;
      arm_rfft_init_q31(&rfft, 128,0,1);
      for(i=0;i<n;i++){
        hanning_q31[i] = (int32_t)(0.5f*2147483647.0f*(1.0f-cosf(2.0f*PI*i/n)));
      }
      while (!chThdShouldTerminate()) {
        chThdSleepMilliseconds(20);
        if (state == 128) {
          arm_mult_q31(hanning_q31, &inbuf[0],&inbuf[0], n);
          arm_rfft_q31(&rfft, &inbuf[0], &fftbuf[0]);
          arm_cmplx_mag_q31(&fftbuf[0], outbuf, n/2);
          // reduce to packed 8bit
          for(i=0;i<n/8;i++){
            int32_t ni;
            uint8_t *nc;
            nc = (uint8_t *)&ni;
            nc[0] = 0xFF & (outbuf[i*4]>>19);
            nc[1] = 0xFF & (outbuf[i*4+1]>>19);
            nc[2] = 0xFF & (outbuf[i*4+2]>>19);
            nc[3] = 0xFF & (outbuf[i*4+3]>>19);
            outbuf[i] = ni;
          }
          state = 129;
        }
      }
}

THD_FUNCTION(ThreadX, arg) {
((attr_parent *)arg)->ThreadX2();
}
WORKING_AREA(waThreadX, 4096);
Thread *Thd;]]></code.declaration>
      <code.init><![CDATA[int i;
for(i=0;i<128;i++) inbuf[i]=0;
for(i=0;i<128;i++) outbuf[i]=0;
state = 0;
  Thd = chThdCreateStatic(waThreadX, sizeof(waThreadX),
                    NORMALPRIO, ThreadX, (void *)this);
]]></code.init>
      <code.dispose><![CDATA[chThdTerminate(Thd);
]]></code.dispose>
      <code.krate><![CDATA[if (state<128){
   int i;
   for(i=0;i<16;i++)
      inbuf[state++] = inlet_in[i];
}
else if (state == 129){
   state = 0;
if (!inlet_hold){    disp_v0=outbuf[0];
    disp_v1=outbuf[1];
    disp_v2=outbuf[2];
    disp_v3=outbuf[3];
    disp_v4=outbuf[4];
    disp_v5=outbuf[5];
    disp_v6=outbuf[6];
    disp_v7=outbuf[7];
    disp_v8=outbuf[8];
    disp_v9=outbuf[9];
    disp_v10=outbuf[10];
    disp_v11=outbuf[11];
    disp_v12=outbuf[12];
    disp_v13=outbuf[13];
    disp_v14=outbuf[14];
    disp_v15=outbuf[15];
}
}
]]></code.krate>
   </obj.normal>
</objdefs>
