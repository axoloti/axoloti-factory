<objdefs appVersion="1.0.11">
   <obj.normal id="flashplay" uuid="595422aa-8767-45a8-ae08-bd8ac0247c61">
      <sDescription>Substitute for the wave/flashplay object, those samples are removed from flash.
This object auto-uploads the samples to sdcard (only if missing), and then reads the samples into sdram at startup.
Single-shot playback of a sample table in flash, without transposition.</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <inlets>
         <bool32.rising name="trig" description="trigger"/>
      </inlets>
      <outlets>
         <frac32buffer name="out" description="wave"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <combo name="sample">
            <MenuEntries>
               <string>808bd</string>
               <string>808hatclose</string>
               <string>808hatopen</string>
               <string>808hitom</string>
               <string>808midtom</string>
               <string>808lotom</string>
               <string>808snare</string>
            </MenuEntries>
            <CEntries>
               <string>bd</string>
               <string>hatclose</string>
               <string>hatopen</string>
               <string>hitom</string>
               <string>midtom</string>
               <string>lotom</string>
               <string>snare</string>
            </CEntries>
         </combo>
      </attribs>
      <file-depends>
         <file-depend localFilename="bd.raw" targetPath="/shared/808/bd.raw"/>
         <file-depend localFilename="hatclose.raw" targetPath="/shared/808/hatclose.raw"/>
         <file-depend localFilename="hatopen.raw" targetPath="/shared/808/hatopen.raw"/>
         <file-depend localFilename="hitom.raw" targetPath="/shared/808/hitom.raw"/>
         <file-depend localFilename="lotom.raw" targetPath="/shared/808/lotom.raw"/>
         <file-depend localFilename="midtom.raw" targetPath="/shared/808/midtom.raw"/>
         <file-depend localFilename="snare.raw" targetPath="/shared/808/snare.raw"/>
      </file-depends>
      <depends>
         <depend>fatfs</depend>
      </depends>
      <code.declaration><![CDATA[const static int max_length = 32*1024;
int16_t *sample;
uint32_t _pos = max_length;
int ntrig=0;]]></code.declaration>
      <code.init><![CDATA[static int16_t _sample[max_length] __attribute__ ((section (".sdram")));
sample = &_sample[0];
FIL FileObject;
FRESULT err;
UINT bytes_read;
const char fn[] = "/shared/808/attr_sample.raw";
err = f_open(&FileObject, fn, FA_READ | FA_OPEN_EXISTING);
if (err != FR_OK) {
	LogTextMessage("Open failed: %s",fn); 
	// clear from file end to array end
	int i;
	for(i=0;i<max_length;i++){
		sample[i]=0;
	}
	return error_fileOperationFailed;
}
err = f_read(&FileObject, (char *)sample, sizeof(_sample),&bytes_read);
if (err != FR_OK) {LogTextMessage("Read failed\n"); return error_fileOperationFailed;}
err = f_close(&FileObject);
if (err != FR_OK) {LogTextMessage("Close failed\n"); return error_fileOperationFailed;}

int i=bytes_read/2; // 16 bit per sample
// clear from file end to array end
for(;i<max_length;i++){
	sample[i]=0;
}]]></code.init>
      <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {_pos=0;  ntrig=1;}
if (!(inlet_trig>0)) ntrig=0;
     int32_t i;
if (_pos<max_length) {
    for(i=0;i<BUFSIZE;i++) (outlet_out)[i] = (sample[_pos++])<<12;
} else {
    for(i=0;i<BUFSIZE;i++) (outlet_out)[i] = 0;
}]]></code.krate>
   </obj.normal>
</objdefs>
