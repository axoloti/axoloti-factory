<objdefs>
   <obj.normal id="clock" uuid="12b916e835bb6fc9fa4f2c858d1d1a72d5cf6d08" sha="b1a8f7267317fa583225dc218f285fe306220d1b">
      <upgradeSha>2e1ff23ac85034ded776c411284443b01ea9cd80</upgradeSha>
      <sDescription>Midi clock master, als outputs Midi clock, start, stop, and continue messages</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>midi_out.axh</helpPatch>
      <inlets>
         <bool32 name="run" description="Run"/>
         <bool32.rising name="rst" description="Reset"/>
      </inlets>
      <outlets>
         <bool32 name="active" description="Song is playing"/>
         <int32 name="pos4ppq" description="Position in 4 counts per quarter"/>
         <int32 name="pos24ppq" description="Position in 24 counts per quarter"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="bpm" noLabel="true"/>
      </params>
      <attribs>
         <midiOutPort name="port" description=""/>
      </attribs>
      <code.declaration><![CDATA[bool _active;
int32_t _posfrac;
int32_t _pos24ppq;
bool rstp;
]]></code.declaration>
      <code.init><![CDATA[_active = 0;
_posfrac = 0;
_pos24ppq = 0;
rstp = 0;]]></code.init>
      <code.krate><![CDATA[if (inlet_rst & !rstp){
   rstp = 1;
   _posfrac = 0;
   _pos24ppq = 0;
} else if (!inlet_rst){
   rstp = 0;
}
if (inlet_run && !_active) {
  _active = 1;
  if (_pos24ppq) {
    MidiSend1((midi_device_t) attr_device, MIDI_CONTINUE);
  } else {
    MidiSend1((midi_device_t) attr_device, MIDI_START);
    MidiSend1((midi_device_t) attr_device, MIDI_TIMING_CLOCK);
  }
} else if (!inlet_run && _active){
  _active = 0;
  MidiSend1((midi_device_t) attr_device, MIDI_STOP);
}if (_active) {
  _posfrac += param_bpm;
  if (_posfrac & 1<<31) {
    _posfrac &= (1<<31)-1;
    _pos24ppq++;
    MidiSend1((midi_device_t) attr_device,MIDI_TIMING_CLOCK);
  }
}
outlet_pos4ppq = _pos24ppq/6;
outlet_pos24ppq = _pos24ppq;
outlet_active = _active;
]]></code.krate>
   </obj.normal>
</objdefs>
